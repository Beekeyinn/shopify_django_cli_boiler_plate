# Generated by Django 4.2 on 2023-07-14 09:23

import accounts.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('shopify_domain', models.CharField(db_index=True, help_text='Please provide the domain name only. Eg: example.myshopify.com', max_length=255, unique=True, validators=[accounts.validators.validate_myshopify_domain], verbose_name='Shopify Domain Name')),
                ('token', models.CharField(default='00000000000000000000000000000000', max_length=64, verbose_name='Shopify APP Token')),
                ('access_scopes', models.TextField(default='write_products', verbose_name='Shopify Access Scope')),
                ('host', models.CharField(default='000000000000000000000000000000', max_length=100, verbose_name='Shop ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Admin')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
